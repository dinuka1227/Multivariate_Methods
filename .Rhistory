knitr::opts_chunk$set(echo = TRUE)
# Load necessary library
require(MASS)
# Define the given covariance matrices
sigmaxx <- matrix(c(1.0372, 0.5675, 0.5675, 1.0221), nrow=2, byrow=TRUE)
sigmayy <- matrix(c(1.1068, 0.5686, 0.5686, 1.0668), nrow=2, byrow=TRUE)
sigmayx <- matrix(c(0.7608, 0.7943, 0.7025, 0.8452), nrow=2, byrow=TRUE)
# Invert the matrices sigmaxx and sigmayy
sigmaxx_inv <- ginv(sigmaxx)
sigmayy_inv <- ginv(sigmayy)
# Compute the matrix product
product_matrix <- sigmaxx_inv %*% sigmayx %*% sigmayy_inv %*% t(sigmayx)
# Find eigenvalues and eigenvectors
eigen_result <- eigen(product_matrix)
eigenvalues <- eigen_result$values
eigenvectors <- eigen_result$vectors
# Canonical correlations (square root of eigenvalues)
canonical_correlations <- sqrt(eigenvalues)
# Display the results
cat("Eigenvalues:\n")
print(eigenvalues)
cat("Eigenvectors:\n")
print(eigenvectors)
cat("Canonical correlations:\n")
print(canonical_correlations)
# Define the given covariance matrices
sigmax = matrix(c(1.0372, 0.5675, 0.5675, 1.0221), byrow=TRUE, nrow=2)
sigmay = matrix(c(0.7608, 0.7025, 0.7943, 0.8452), byrow=TRUE, nrow=2)
# Load necessary library
require(MASS)
# Invert the sigma x matrix
sigmaxinv = ginv(sigmax)
# Define a1 as given
a1 = as.matrix(c(0.4246, 0.669))
# Compute b1
b1 = (1/0.9615) * sigmaxinv %*% sigmay %*% a1
# Standardize the coefficients in b1
b1_standardized = b1 / sqrt(sum(b1^2))
# Display the results
cat("b1 (unstandardized):\n")
print(b1)
cat("\nb1 (standardized):\n")
print(b1_standardized)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(tidyr)
library(Amelia)
install.packages("Amelia")
library(dplyr)
library(tidyr)
library(Amelia)
library(dplyr)
library(tidyr)
library(Amelia)
library(tidyverse)
life_exp_data<-read_csv("../data/Life Expectancy Data.csv")
View(life_exp_data)
missmap(life_exp_data, main = "Missing Values Map", col = c("yellow", "black"), legend = TRUE)
life_exp_data <- life_exp_data %>% select_if(~ mean(is.na(.)) < 0.5)
missmap(life_exp_data, main = "Missing Values Map", col = c("yellow", "black"), legend = TRUE)
#fuel_consumption<-fuel_consumption%>%drop_na()
life_exp_data<-life_exp_data%>%drop_na()
missmap(life_exp_data, main = "Missing Values Map", col = c("yellow", "black"), legend = TRUE)
View(life_exp_data)
head(life_exp_data)
summary(data)
summary(life_exp_data)
# Select the variables for X and Y
X <- as.matrix(data[, c("GDP", "Population", "Percentage.expenditure","Alcohol","Schooling",
"Thinness.1.19.years", "Thinness.5.9.years")])
# Select the variables for X and Y
X <- as.matrix(data[, c("GDP","Population","Percentage.expenditure","Alcohol","Schooling",
"Thinness.1.19.years", "Thinness.5.9.years")])
summary(life_exp_data)
# Select the variables for X and Y
X <- as.matrix(data[, c("GDP","Population","Percentage expenditure","Alcohol","Schooling",
"thinness  1-19 years", "thinness 5-9 years")])
#summary(life_exp_data)
str(life_exp_data)
#summary(life_exp_data)
#str(life_exp_data)
colnames(life_exp_data)
# Select the variables for X and Y
X <- as.matrix(my_data[, c("GDP", "Population", "percentage expenditure", "Alcohol", "Schooling",
"thinness  1-19 years", "thinness 5-9 years")])
# Select the variables for X and Y
X <- as.matrix(life_exp_data[, c("GDP", "Population", "percentage expenditure", "Alcohol", "Schooling",
"thinness  1-19 years", "thinness 5-9 years")])
Y <- as.matrix(life_exp_data[, c("Life expectancy", "Adult Mortality", "infant deaths",
"BMI", "under-five deaths", "HIV/AIDS", "Hepatitis B",
"Measles")])
# Select the variables for X and Y
X <- as.matrix(life_exp_data[, c("GDP", "Population", "percentage expenditure", "Alcohol")])
Y <- as.matrix(life_exp_data[, c("Life expectancy", "Adult Mortality", "infant deaths","BMI",)])
# Select the variables for X and Y
X <- as.matrix(life_exp_data[, c("GDP", "Population", "percentage expenditure", "Alcohol")])
Y <- as.matrix(life_exp_data[, c("Life expectancy", "Adult Mortality", "infant deaths","BMI")])
# Standardize numeric columns
life_exp_data <- life_exp_data%>% mutate_if(is.numeric, scale)
head(life_exp_data)
# Select the variables for X and Y
X <- as.matrix(life_exp_data[, c("GDP", "Population", "percentage expenditure", "Alcohol")])
Y <- as.matrix(life_exp_data[, c("Life expectancy", "Adult Mortality", "infant deaths","BMI")])
ggpairs(X)
require(GGally)
require(CCA)
require(CCP)
ggpairs(X)
install.packages("GGally")
install.packages("CCA")
install.packages("CCP")
ggpairs(X)
require(GGally)
require(CCA)
require(CCP)
ggpairs(X)
ggpairs(Y)
ggpairs(X)
ggpairs(Y)
ggpairs(X)
ggpairs(Y)
ggpairs(X)
ggpairs(Y)
#Find the correlations within and between the two sets of variables.
matcor(X,Y)
#Apply Canonical Correlation Analysis to the two groups.
cc1 <- cc(X,Y)
#The canonical correlations.
cc1$cor
#The squared canonical correlations
(cc1$cor)^2
cc1
cc1[3]
cc1[4]
cc2 <- comput(Y,X, cc1)
cc2 <- comput(Y,X, cc1)
cc2
cc2 <- comput(Y,X, cc1)
cc2[3:6]
rho <- cc1$cor
n <- dim(X)[1]
p <- length(X)
q <- length(Y)
n <- dim(X)[1]
p <- length(X)
q <- length(Y)
p.asym(rho, n, p, q, tstat = "Wilks")
n
n
p
q
n <- dim(X)
p <- length(X)
q <- length(Y)
n
p
q
n <- dim(X)[1]
p <- length(X)
q <- length(Y)
p.asym(rho, n, p, q, tstat = "Wilks")
n <- dim(X)[2]
p <- length(X)
q <- length(Y)
n
p
q
p.asym(rho, n, p, q, tstat = "Wilks")
n <- dim(X)[1]
p <- length(X)
q <- length(Y)
# Select the variables for X and Y
X <- as.matrix(life_exp_data[, c("GDP", "Population", "percentage expenditure", "Alcohol")])
Y <- as.matrix(life_exp_data[, c("Life expectancy", "Adult Mortality", "infant deaths","BMI")])
ggpairs(X)
ggpairs(Y)
# Select the variables for X and Y
X <- as.matrix(life_exp_data[, c("GDP", "Population", "percentage expenditure")])
Y <- as.matrix(life_exp_data[, c("Life expectancy", "Adult Mortality", "infant deaths")])
ggpairs(X)
ggpairs(Y)
#Find the correlations within and between the two sets of variables.
matcor(X,Y)
#Apply Canonical Correlation Analysis to the two groups.
cc1 <- cc(X,Y)
#The canonical correlations.
cc1$cor
#The squared canonical correlations
(cc1$cor)^2
cc1
cc1[3]
cc1[4]
cc2 <- comput(Y,X, cc1)
cc2[3:6]
rho <- cc1$cor
n <- dim(X)[1]
p <- length(X)
q <- length(Y)
p.asym(rho, n, p, q, tstat = "Wilks")
p.asym(rho, n, p, q, tstat = "Wilks")
p.asym(rho, n, p, q, tstat = "Wilks")
p.asym(rho, n, p, q, tstat = "Wilks")
cc2 <- comput(X,Y, cc1)
cc2[3:6]
rho <- cc1$cor
n <- dim(X)[1]
p <- length(X)
q <- length(Y)
p.asym(rho, n, p, q, tstat = "Wilks")
library(CCP)
rho <- cc1$cor
n <- dim(X)[1]
p <- length(X)
q <- length(Y)
n <- dim(X)[1]
p <- length(X)
q <- length(Y)
n
p
q
n <- dim(X)[1]
p <- length(X)
q <- length(Y)
X
n <- dim(X)[1]
p <- 3
q <- 3
X
p.asym(rho, n, p, q, tstat = "Wilks")
p.asym(rho, n, p, q, tstat = "Hotelling")
p.asym(rho, n, p, q, tstat = "Pillai")
p.asym(rho, n, p, q, tstat = "Roy")
life_exp_data<-read_csv("../data/Life Expectancy Data.csv")
life_exp_data <- life_exp_data %>% select_if(~ mean(is.na(.)) < 0.5)
#fuel_consumption<-fuel_consumption%>%drop_na()
life_exp_data<-life_exp_data%>%drop_na()
missmap(life_exp_data, main = "Missing Values Map", col = c("yellow", "black"), legend = TRUE)
# Standardize numeric columns
life_exp_data <- life_exp_data%>% mutate_if(is.numeric, scale)
head(life_exp_data)
#summary(life_exp_data)
#str(life_exp_data)
colnames(life_exp_data)
# Select the variables for X and Y
eco_social<- as.matrix(life_exp_data[, c("GDP", "Population", "percentage expenditure")])
health<- as.matrix(life_exp_data[, c("Life expectancy", "Adult Mortality", "infant deaths")])
ggpairs(eco_social)
ggpairs(health)
#Find the correlations within and between the two sets of variables.
matcor(eco_social,health)
#Apply Canonical Correlation Analysis to the two groups.
cc1 <- cc(eco_social,health)
#The canonical correlations.
cc1$cor
#The squared canonical correlations
(cc1$cor)^2
cc1[3]
cc1[4]
cc2 <- comput(eco_social,health, cc1)
cc2[3:6]
library(CCP)
rho <- cc1$cor
n <- dim(X)[1]
p <- length(eco_social)
q <- length(health)
n
p
q
n
p <-3
q <-3
p.asym(rho, n, p, q, tstat = "Wilks")
p.asym(rho, n, p, q, tstat = "Hotelling")
p.asym(rho, n, p, q, tstat = "Pillai")
p.asym(rho, n, p, q, tstat = "Roy")
ggpairs(eco_social)
ggpairs(health)
ggpairs(eco_social)
ggpairs(health)
#Find the correlations within and between the two sets of variables.
matcor(eco_social,health)
# Select the variables for X and Y
eco_social<- as.matrix(life_exp_data[, c("GDP", "Population", "percentage expenditure")])
health<- as.matrix(life_exp_data[, c("Life expectancy", "Adult Mortality", "infant deaths")])
#Find the correlations within and between the two sets of variables.
matcor(eco_social,health)
#Apply Canonical Correlation Analysis to the two groups.
cc1 <- cc(eco_social,health)
#The squared canonical correlations
(cc1$cor)^2
#Standardized square feet sizes canonical coefficients diagonal matrix of sqftSizes standard deviations.
s1 <- diag(sqrt(diag(cov(eco_social))))
s1 %*% cc1$xcoef
#Standardized facilities canonical coefficients diagonal matrix of facilities standard deviations.
s2 <- diag(sqrt(diag(cov(facilities))))
#Apply Canonical Correlation Analysis to the two groups.
cc1 <- cc(eco_social,health)
#The canonical correlations.
cc1$cor
#The squared canonical correlations
(cc1$cor)^2
cc1
#Raw canonical coefficients for the eco_social variables.
cc1[3]
#Row canonical coefficients for the health variables.
cc1[4]
#Compute canonical loadings.
cc2 <- comput(eco_social,health, cc1)
#Correlations between each variable and the corresponding canonical variate.
cc2[3:6]
library(CCP)
#Tests of canonical dimensions.
rho <- cc1$cor
n <-1
p <-3
q <-3
#Calculate p-values using the F-approximations of different test statistics:
p.asym(rho, n, p, q, tstat = "Wilks")
p.asym(rho, n, p, q, tstat = "Hotelling")
p.asym(rho, n, p, q, tstat = "Pillai")
p.asym(rho, n, p, q, tstat = "Roy")
#Define number of observations, number of variables in first set, and number of variables in the second set.
n <- dim(X)[1]
p <- length(eco_social)
q <- length(health)
n
p <-3
q <-3
#Calculate p-values using the F-approximations of different test statistics:
p.asym(rho, n, p, q, tstat = "Wilks")
p.asym(rho, n, p, q, tstat = "Hotelling")
p.asym(rho, n, p, q, tstat = "Pillai")
p.asym(rho, n, p, q, tstat = "Roy")
#Standardized square feet sizes canonical coefficients diagonal matrix of sqftSizes standard deviations.
s1 <- diag(sqrt(diag(cov(eco_social))))
s1 %*% cc1$xcoef
#Standardized facilities canonical coefficients diagonal matrix of facilities standard deviations.
s2 <- diag(sqrt(diag(cov(facilities))))
#Standardized facilities canonical coefficients diagonal matrix of facilities standard deviations.
s2 <- diag(sqrt(diag(cov(health))))
s2 %*% cc1$ycoef
library(dplyr)
library(tidyr)
library(Amelia)
library(tidyverse)
require(GGally)
require(CCA)
require(CCP)
life_exp_data<-read_csv("../data/Life Expectancy Data.csv")
head(life_exp_data)
life_exp_data <- life_exp_data %>% select_if(~ mean(is.na(.)) < 0.5)
life_exp_data<-life_exp_data%>%drop_na()
missmap(life_exp_data, main = "Missing Values Map", col = c("yellow", "black"), legend = TRUE)
# Standardize numeric columns
life_exp_data <- life_exp_data%>% mutate_if(is.numeric, scale)
#head(life_exp_data)
# Select the variables for X and Y
eco_social<- as.matrix(life_exp_data[, c("GDP", "Population", "percentage expenditure")])
health<- as.matrix(life_exp_data[, c("Life expectancy", "Adult Mortality", "infant deaths")])
#Pairwise scatter plots.
ggpairs(eco_social)
ggpairs(health)
#Find the correlations within and between the two sets of variables.
matcor(eco_social,health)
#Apply Canonical Correlation Analysis to the two groups.
cc1 <- cc(eco_social,health)
#The canonical correlations.
cc1$cor
#The squared canonical correlations
(cc1$cor)^2
#Raw canonical coefficients for the eco_social variables.
cc1[3]
#Compute canonical loadings.
cc2 <- comput(eco_social,health, cc1)
#Correlations between each variable and the corresponding canonical variate.
cc2[3:6]
#Row canonical coefficients for the health variables.
cc1[4]
#Tests of canonical dimensions.
rho <- cc1$cor
#Define number of observations, number of variables in first set, and number of variables in the second set.
n <- dim(X)[1]
p <- length(eco_social)
q <- length(health)
n
p <-3
q <-3
#Calculate p-values using the F-approximations of different test statistics:
p.asym(rho, n, p, q, tstat = "Wilks")
p.asym(rho, n, p, q, tstat = "Hotelling")
p.asym(rho, n, p, q, tstat = "Pillai")
p.asym(rho, n, p, q, tstat = "Roy")
#Standardized square feet sizes canonical coefficients diagonal matrix of sqftSizes standard deviations.
s1 <- diag(sqrt(diag(cov(eco_social))))
s1 %*% cc1$xcoef
#Standardized facilities canonical coefficients diagonal matrix of facilities standard deviations.
s2 <- diag(sqrt(diag(cov(health))))
s2 %*% cc1$ycoef
A <- as.matrix((data.frame(c(7645.45, 303.62), c(303.62, 26.19))))
A
eigen(A)
eigen(A)$values
A <- as.matrix((data.frame(c(7476.45, 303.62), c(303.62, 26.19))))
A
eigen(A)$values
A <- as.matrix((data.frame(c(1,0.686), c(0.686,1))))
eigen(A)$values
